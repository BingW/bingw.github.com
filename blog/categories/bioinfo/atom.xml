<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bioinfo | Bing & KK]]></title>
  <link href="http://BingW.github.com/blog/categories/bioinfo/atom.xml" rel="self"/>
  <link href="http://BingW.github.com/"/>
  <updated>2012-09-10T00:43:18-05:00</updated>
  <id>http://BingW.github.com/</id>
  <author>
    <name><![CDATA[BingW]]></name>
    <email><![CDATA[toaya.kase@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gen875 Reading]]></title>
    <link href="http://BingW.github.com/blog/2012/09/09/paul-alignment-assembly/"/>
    <updated>2012-09-09T14:02:00-05:00</updated>
    <id>http://BingW.github.com/blog/2012/09/09/paul-alignment-assembly</id>
    <content type="html"><![CDATA[<h3>Sense From Sequence Reads: Methods for Alignment and Assembly</h3>

<p><em>Paul Flicek &amp; Ewan Birney</em></p>

<h4>Abstruct</h4>

<p>review of alignment and assembly algorithms</p>

<h4>Background</h4>

<p>quality versus cost tradeoff:</p>

<ul>
<li>de novo sequencing: longer reads</li>
<li>resequencing: high coverage, paired-end reads</li>
<li>mapping TF binding site/location of modified histones: <a href="http://en.wikipedia.org/wiki/Chromatin_immunoprecipitation">ChIP</a>, short reads</li>
<li>DNase-seq: limited to only 20bp of informative sequence</li>
</ul>


<p>Different error characteristics:</p>

<ul>
<li>Roche 454:insertion or deletion errors during homopolymer runs</li>
<li>ABI SOLiD &amp; Illumina/Solexa: errors toward the end of the read</li>
</ul>


<h4>Alignment</h4>

<p>Alignment methods(tradeoff between speed and sensitivity):</p>

<ul>
<li>hash table-based implementations</li>
<li>Burrows Wheeler transform(BWT)-based methods</li>
</ul>


<p>Alignment procedure:</p>

<ol>
<li>heuristic techniques</li>
<li>accurate alignment alogrithms(Smith-Waterman)</li>
</ol>


<h5>Hash-based alignment methods</h5>

<p>Sepecially for short reads. methods include:</p>

<ul>
<li><p>[MAQ][8]:</p>

<p>  From the first 28 bp of the read, MAQ program builds 6 hash tables corresponding
  to seeds of (length = 8, weight = 4). scans the reference genome against these
  hash tables. This ensures that all hits with 2 mismatches can be found. 20 hash
  tables required if get all 3 mismatches.</p></li>
<li><p>[SOPA][9]:</p>

<ol>
<li></li>
</ol>
</li>
<li><p>Illumina's unpublished ELAND algorithm</p></li>
</ul>


<p>These have recently been joined by:</p>

<ul>
<li><p>[SHRiMP][10]:</p>

<p>  use a [q-gram][13] approach, (require mutiple sapced seeds per read</p></li>
<li><p>[ZOOM][11]:</p>

<p>  manually constructed spaced seeds of weight 14 to enable the detection of up to 4    mismatches in 50-bp reads</p></li>
<li><p><a href="http://genome.ucla.edu/bfast/">BFAST</a></p></li>
<li><p><a href="http://bioinformatics.bc.edu/marthlab/Mosaik/">MOSAIK</a></p>

<p>  hashes all positions in the reference genome and uses a 'jump database' to
  efficiently locate information in the hash table and thus reduces memory
  requirements by approximately two-thirds over a naive implementation.</p></li>
</ul>


<h5>Burrows-Wheeler Transform methods</h5>

<p>use the FM index data structure, retains the suffix array's ability for rapid subsequence search. Much faster than their hash-based counterparts at the same sensitivity level</p>

<ol>
<li>the sequence order of the reference genome is modified using the BWT(reversible)</li>
<li><p>the final index is created; it is then used for rapid read placement on the
genome(memory-intensive)</p></li>
<li><p>[BOWTIE][14]:</p>

<p>  Reported 30-fold speed increase over hash-based MAQ</p></li>
<li><p>[BWA][15]:</p></li>
<li><p>[SOAP2][16]:</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
